//===-- DPUInstructionDecoder.cpp - Disassembler for DPU -------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file implements the DPUInstructionDecoder class.
// Automatically generated by DPU disasm, please do not modify!
//
//===----------------------------------------------------------------------===//

#include "DPUInstructionDecoder.h"

using namespace llvm;

#define GET_INSTRINFO_ENUM
#include "DPUGenInstrInfo.inc"
#define GET_REGINFO_ENUM
#include "DPUGenRegisterInfo.inc"

MCDisassembler::DecodeStatus DPUInstructionDecoder::getInstruction(MCInst &MI, uint64_t &Insn, DPUOperandDecoder &DAsm, bool useSugar) const {
    MI.clear();
	if ((((Insn >> 44) & 0xfL))==(0x7L)) {
		if ((((Insn >> 32) & 0x3L))==(0x3L)) {
			if ((((Insn >> 42) & 0x3L))==(0x3L)) {
				if (((((Insn >> 28) & 0xfL))&(0x8L))==(0x8L)) {
					if ((((Insn >> 24) & 0x3L))!=(0x0L)) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 26) & 31) << 8) | (((Insn >> 39) & 7) << 13), 16 );
						DAsm.Decode_cc(MI, ConditionClass::AcquireCC, (((Insn >> 24) & 3) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::ACQUIRErici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0x3L))==(0x0L)) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 26) & 31) << 8) | (((Insn >> 39) & 7) << 13), 16 );
						DAsm.Decode_cc(MI, ConditionClass::ReleaseCC, (((Insn >> 24) & 3) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::RELEASErici);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x2L)) {
					if (((((Insn >> 39) & 0x1fL))&(0x1bL))==(0x1bL)) {
						if (((((Insn >> 24) & 0xfL))<(0x6L))||((((Insn >> 24) & 0xfL))>(0xbL))) {
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0xf00ffffL))==(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
								MI.setOpcode(DPU::BOOTri);
								return MCDisassembler::Success;
							}
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
							DAsm.Decode_cc(MI, ConditionClass::BootCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::BOOTrici);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 39) & 0x1fL))&(0x1fL))==(0x19L)) {
						if (((((Insn >> 24) & 0xfL))<(0x6L))||((((Insn >> 24) & 0xfL))>(0xbL))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
							DAsm.Decode_cc(MI, ConditionClass::BootCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::CLR_RUNrici);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 39) & 0x1fL))&(0x1fL))==(0x1cL)) {
						if ((((Insn >> 34) & 0x1fL))==(0x18L)) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0xffffffL))==(0x0L))) {
									MI.setOpcode(DPU::BKP);
									return MCDisassembler::Success;
								}
								DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
								MI.setOpcode(DPU::FAULTi);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 39) & 0x1fL))&(0x1fL))==(0x18L)) {
						if (((((Insn >> 28) & 0xfL))&(0xfL))==(0x3L)) {
							if (((((Insn >> 24) & 0xfL))<(0x6L))||((((Insn >> 24) & 0xfL))>(0xbL))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
								DAsm.Decode_cc(MI, ConditionClass::BootCC, (((Insn >> 24) & 15) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::READ_RUNrici);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 39) & 0x1fL))&(0x1bL))==(0x1aL)) {
						if (((((Insn >> 24) & 0xfL))<(0x6L))||((((Insn >> 24) & 0xfL))>(0xbL))) {
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0xf00ffffL))==(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
								MI.setOpcode(DPU::RESUMEri);
								return MCDisassembler::Success;
							}
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
							DAsm.Decode_cc(MI, ConditionClass::BootCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::RESUMErici);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 39) & 0x1fL))&(0x1fL))==(0x1dL)) {
						if ((((Insn >> 34) & 0x1fL))==(0x1cL)) {
							if (((((Insn >> 24) & 0xfL))<(0x6L))||((((Insn >> 24) & 0xfL))>(0xbL))) {
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0xf00ffffL))==(0x0L))) {
									MI.setOpcode(DPU::STOP);
									return MCDisassembler::Success;
								}
								DAsm.Decode_cc(MI, ConditionClass::BootCC, (((Insn >> 24) & 15) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::STOPci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xfL))==(0x0L)) {
					if (((((Insn >> 39) & 0x1fL))&(0x1fL))==(0x18L)) {
						if ((((Insn >> 34) & 0x1fL))==(0x18L)) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x0L)) {
									if (((((Insn >> 0) & 0xffffL))&(0xffffL))==(0x0L)) {
										MI.setOpcode(DPU::NOP);
										return MCDisassembler::Success;
									}
								return MCDisassembler::Fail;
								}
							return MCDisassembler::Fail;
							}
						return MCDisassembler::Fail;
						}
						if ((((Insn >> 37) & 0x3L))!=(0x3L)) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
								MI.setOpcode(DPU::TELLri);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x4L)) {
					if ((((Insn >> 28) & 0x1L))==(0x0L)) {
						if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x0L)) {
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
								DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 15) << 4), 8 );
								MI.setOpcode(DPU::SBrii);
								return MCDisassembler::Success;
							}
							DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
							DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 15) << 4), 8 );
							MI.setOpcode(DPU::SBerii);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x6L)) {
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
								DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4), 16 );
								MI.setOpcode(DPU::SDrii);
								return MCDisassembler::Success;
							}
							DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
							DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4), 16 );
							MI.setOpcode(DPU::SDerii);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x2L)) {
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
								DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4), 16 );
								MI.setOpcode(DPU::SHrii);
								return MCDisassembler::Success;
							}
							DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
							DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4), 16 );
							MI.setOpcode(DPU::SHerii);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x4L)) {
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
								DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4), 16 );
								MI.setOpcode(DPU::SWrii);
								return MCDisassembler::Success;
							}
							DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
							DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4), 16 );
							MI.setOpcode(DPU::SWerii);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 28) & 0x1L))==(0x1L)) {
						if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x0L)) {
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
								DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 15) << 4), 8 );
								MI.setOpcode(DPU::SBSrii);
								return MCDisassembler::Success;
							}
							DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
							DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 15) << 4), 8 );
							MI.setOpcode(DPU::SBesii);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x6L)) {
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
								DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4), 16 );
								MI.setOpcode(DPU::SDSrii);
								return MCDisassembler::Success;
							}
							DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
							DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4), 16 );
							MI.setOpcode(DPU::SDesii);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x2L)) {
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
								DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4), 16 );
								MI.setOpcode(DPU::SHSrii);
								return MCDisassembler::Success;
							}
							DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
							DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4), 16 );
							MI.setOpcode(DPU::SHesii);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x4L)) {
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
								DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4), 16 );
								MI.setOpcode(DPU::SWSrii);
								return MCDisassembler::Success;
							}
							DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
							DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4), 16 );
							MI.setOpcode(DPU::SWesii);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x6L)) {
					if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x0L)) {
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x80f000fL))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
							MI.setOpcode(DPU::SB_IDri);
							return MCDisassembler::Success;
						}
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
							DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 15) << 4), 8 );
							MI.setOpcode(DPU::SB_IDrii);
							return MCDisassembler::Success;
						}
						DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
						DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 15) << 4), 8 );
						MI.setOpcode(DPU::SB_IDerii);
						return MCDisassembler::Success;
					}
					if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x6L)) {
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x80f0fffL))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
							MI.setOpcode(DPU::SD_IDri);
							return MCDisassembler::Success;
						}
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
							DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4), 16 );
							MI.setOpcode(DPU::SD_IDrii);
							return MCDisassembler::Success;
						}
						DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
						DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4), 16 );
						MI.setOpcode(DPU::SD_IDerii);
						return MCDisassembler::Success;
					}
					if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x2L)) {
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x80f0fffL))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
							MI.setOpcode(DPU::SH_IDri);
							return MCDisassembler::Success;
						}
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
							DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4), 16 );
							MI.setOpcode(DPU::SH_IDrii);
							return MCDisassembler::Success;
						}
						DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
						DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4), 16 );
						MI.setOpcode(DPU::SH_IDerii);
						return MCDisassembler::Success;
					}
					if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x4L)) {
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x80f0fffL))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
							MI.setOpcode(DPU::SW_IDri);
							return MCDisassembler::Success;
						}
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
							DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4), 16 );
							MI.setOpcode(DPU::SW_IDrii);
							return MCDisassembler::Success;
						}
						DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11), 12 );
						DAsm.Decode_imm(MI, (((Insn >> 16) & 15) << 0) | (((Insn >> 0) & 4095) << 4), 16 );
						MI.setOpcode(DPU::SW_IDerii);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if ((((Insn >> 42) & 0x3L))!=(0x3L)) {
				if ((((Insn >> 25) & 0x3L))!=(0x3L)) {
					if (((((Insn >> 28) & 0xfL))&(0xcL))==(0x4L)) {
						if ((((Insn >> 28) & 0x1L))==(0x0L)) {
							if (((((Insn >> 24) & 0xfL))&(0x7L))==(0x1L)) {
								if (((((Insn >> 29) & 0x1L))==(0x1L))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
									if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
										DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
										DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
										DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
										MI.setOpcode(DPU::LBS_Srri);
										return MCDisassembler::Success;
									}
									DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
									DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									MI.setOpcode(DPU::LBS_Serri);
									return MCDisassembler::Success;
								}
								if ((((Insn >> 29) & 0x1L))==(0x0L)) {
									if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
										DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
										DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
										DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
										MI.setOpcode(DPU::LBSrri);
										return MCDisassembler::Success;
									}
									DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
									DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									MI.setOpcode(DPU::LBSerri);
									return MCDisassembler::Success;
								}
							return MCDisassembler::Fail;
							}
							if (((((Insn >> 24) & 0xfL))&(0x7L))==(0x0L)) {
								if (((((Insn >> 29) & 0x1L))==(0x1L))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
									if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
										DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
										DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
										DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
										MI.setOpcode(DPU::LBU_Urri);
										return MCDisassembler::Success;
									}
									DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
									DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									MI.setOpcode(DPU::LBU_Uerri);
									return MCDisassembler::Success;
								}
								if ((((Insn >> 29) & 0x1L))==(0x0L)) {
									if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
										DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
										DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
										DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
										MI.setOpcode(DPU::LBUrri);
										return MCDisassembler::Success;
									}
									DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
									DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									MI.setOpcode(DPU::LBUerri);
									return MCDisassembler::Success;
								}
							return MCDisassembler::Fail;
							}
							if (((((Insn >> 24) & 0xfL))&(0x7L))==(0x3L)) {
								if (((((Insn >> 29) & 0x1L))==(0x1L))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
									if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
										DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
										DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
										DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
										MI.setOpcode(DPU::LHS_Srri);
										return MCDisassembler::Success;
									}
									DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
									DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									MI.setOpcode(DPU::LHS_Serri);
									return MCDisassembler::Success;
								}
								if ((((Insn >> 29) & 0x1L))==(0x0L)) {
									if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
										DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
										DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
										DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
										MI.setOpcode(DPU::LHSrri);
										return MCDisassembler::Success;
									}
									DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
									DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									MI.setOpcode(DPU::LHSerri);
									return MCDisassembler::Success;
								}
							return MCDisassembler::Fail;
							}
							if (((((Insn >> 24) & 0xfL))&(0x7L))==(0x2L)) {
								if (((((Insn >> 29) & 0x1L))==(0x1L))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
									if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
										DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
										DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
										DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
										MI.setOpcode(DPU::LHU_Urri);
										return MCDisassembler::Success;
									}
									DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
									DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									MI.setOpcode(DPU::LHU_Uerri);
									return MCDisassembler::Success;
								}
								if ((((Insn >> 29) & 0x1L))==(0x0L)) {
									if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
										DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
										DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
										DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
										MI.setOpcode(DPU::LHUrri);
										return MCDisassembler::Success;
									}
									DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
									DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									MI.setOpcode(DPU::LHUerri);
									return MCDisassembler::Success;
								}
							return MCDisassembler::Fail;
							}
							if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x4L)) {
								if (((((Insn >> 29) & 0x1L))==(0x1L))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
									if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
										DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
										DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
										DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
										MI.setOpcode(DPU::LW_Srri);
										return MCDisassembler::Success;
									}
									DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
									DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									MI.setOpcode(DPU::LW_Serri);
									return MCDisassembler::Success;
								}
								if (((((Insn >> 29) & 0x1L))==(0x1L))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
									if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
										DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
										DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
										DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
										MI.setOpcode(DPU::LW_Urri);
										return MCDisassembler::Success;
									}
									DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
									DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									MI.setOpcode(DPU::LW_Uerri);
									return MCDisassembler::Success;
								}
								if ((((Insn >> 29) & 0x1L))==(0x0L)) {
									if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
										DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
										DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
										DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
										MI.setOpcode(DPU::LWrri);
										return MCDisassembler::Success;
									}
									DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
									DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									MI.setOpcode(DPU::LWerri);
									return MCDisassembler::Success;
								}
							return MCDisassembler::Fail;
							}
						return MCDisassembler::Fail;
						}
						if ((((Insn >> 28) & 0x1L))==(0x1L)) {
							if (((((Insn >> 24) & 0xfL))&(0x7L))==(0x1L)) {
								if ((((Insn >> 29) & 0x1L))==(0x0L)) {
									if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
										DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
										DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
										DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
										MI.setOpcode(DPU::LBSSrri);
										return MCDisassembler::Success;
									}
									DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
									DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									MI.setOpcode(DPU::LBSersi);
									return MCDisassembler::Success;
								}
							return MCDisassembler::Fail;
							}
							if (((((Insn >> 24) & 0xfL))&(0x7L))==(0x0L)) {
								if ((((Insn >> 29) & 0x1L))==(0x0L)) {
									if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
										DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
										DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
										DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
										MI.setOpcode(DPU::LBUSrri);
										return MCDisassembler::Success;
									}
									DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
									DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									MI.setOpcode(DPU::LBUersi);
									return MCDisassembler::Success;
								}
							return MCDisassembler::Fail;
							}
							if (((((Insn >> 24) & 0xfL))&(0x7L))==(0x3L)) {
								if ((((Insn >> 29) & 0x1L))==(0x0L)) {
									if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
										DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
										DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
										DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
										MI.setOpcode(DPU::LHSSrri);
										return MCDisassembler::Success;
									}
									DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
									DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									MI.setOpcode(DPU::LHSersi);
									return MCDisassembler::Success;
								}
							return MCDisassembler::Fail;
							}
							if (((((Insn >> 24) & 0xfL))&(0x7L))==(0x2L)) {
								if ((((Insn >> 29) & 0x1L))==(0x0L)) {
									if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
										DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
										DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
										DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
										MI.setOpcode(DPU::LHUSrri);
										return MCDisassembler::Success;
									}
									DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
									DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									MI.setOpcode(DPU::LHUersi);
									return MCDisassembler::Success;
								}
							return MCDisassembler::Fail;
							}
							if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x4L)) {
								if ((((Insn >> 29) & 0x1L))==(0x0L)) {
									if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
										DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
										DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
										DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
										MI.setOpcode(DPU::LWSrri);
										return MCDisassembler::Success;
									}
									DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
									DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									MI.setOpcode(DPU::LWersi);
									return MCDisassembler::Success;
								}
							return MCDisassembler::Fail;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 25) & 0x3L))==(0x3L)) {
					if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x4L)) {
						if ((((Insn >> 28) & 0x1L))==(0x0L)) {
							if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x6L)) {
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
									DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									MI.setOpcode(DPU::LDrri);
									return MCDisassembler::Success;
								}
								DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
								DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
								MI.setOpcode(DPU::LDerri);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if ((((Insn >> 28) & 0x1L))==(0x1L)) {
							if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x6L)) {
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
									DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									MI.setOpcode(DPU::LDSrri);
									return MCDisassembler::Success;
								}
								DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
								DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
								MI.setOpcode(DPU::LDersi);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
		return MCDisassembler::Fail;
		}
		if ((((Insn >> 32) & 0x3L))!=(0x3L)) {
			if (((((Insn >> 39) & 0x1fL))&(0x1fL))==(0x0L)) {
				if (((((Insn >> 0) & 0xffffL))&(0xffffL))==(0x0L)) {
					DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
					DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
					DAsm.Decode_immDma(MI, (((Insn >> 24) & 255) << 0));
					MI.setOpcode(DPU::LDMArri);
					return MCDisassembler::Success;
				}
				if (((((Insn >> 0) & 0xffffL))&(0xffffL))==(0x4L)) {
					DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
					DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
					DAsm.Decode_immDma(MI, (((Insn >> 24) & 255) << 0));
					MI.setOpcode(DPU::LDMA_DBGrri);
					return MCDisassembler::Success;
				}
				if (((((Insn >> 0) & 0xffffL))&(0xffffL))==(0x1L)) {
					DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
					DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
					DAsm.Decode_immDma(MI, (((Insn >> 24) & 255) << 0));
					MI.setOpcode(DPU::LDMAIrri);
					return MCDisassembler::Success;
				}
				if (((((Insn >> 0) & 0xffffL))&(0xffffL))==(0x2L)) {
					DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
					DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
					DAsm.Decode_immDma(MI, (((Insn >> 24) & 255) << 0));
					MI.setOpcode(DPU::SDMArri);
					return MCDisassembler::Success;
				}
				if (((((Insn >> 0) & 0xffffL))&(0xffffL))==(0x6L)) {
					DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
					DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
					DAsm.Decode_immDma(MI, (((Insn >> 24) & 255) << 0));
					MI.setOpcode(DPU::SDMA_DBGrri);
					return MCDisassembler::Success;
				}
			return MCDisassembler::Fail;
			}
			if ((((Insn >> 42) & 0x3L))==(0x3L)) {
				if ((((Insn >> 16) & 0x1L))==(0x0L)) {
					if (((((Insn >> 28) & 0xfL))&(0xcL))==(0x4L)) {
						if ((((Insn >> 28) & 0x1L))==(0x0L)) {
							if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x0L)) {
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									MI.setOpcode(DPU::SBrir);
									return MCDisassembler::Success;
								}
								DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::SBerir);
								return MCDisassembler::Success;
							}
							if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x2L)) {
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									MI.setOpcode(DPU::SHrir);
									return MCDisassembler::Success;
								}
								DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::SHerir);
								return MCDisassembler::Success;
							}
							if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x4L)) {
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									MI.setOpcode(DPU::SWrir);
									return MCDisassembler::Success;
								}
								DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::SWerir);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if ((((Insn >> 28) & 0x1L))==(0x1L)) {
							if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x0L)) {
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									MI.setOpcode(DPU::SBSrir);
									return MCDisassembler::Success;
								}
								DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::SBesir);
								return MCDisassembler::Success;
							}
							if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x2L)) {
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									MI.setOpcode(DPU::SHSrir);
									return MCDisassembler::Success;
								}
								DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::SHesir);
								return MCDisassembler::Success;
							}
							if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x4L)) {
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									MI.setOpcode(DPU::SWSrir);
									return MCDisassembler::Success;
								}
								DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::SWesir);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 16) & 0x1L))==(0x1L)) {
					if (((((Insn >> 28) & 0xfL))&(0xcL))==(0x4L)) {
						if ((((Insn >> 28) & 0x1L))==(0x0L)) {
							if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x6L)) {
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									MI.setOpcode(DPU::SDrir);
									return MCDisassembler::Success;
								}
								DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
								DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::SDerir);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if ((((Insn >> 28) & 0x1L))==(0x1L)) {
							if (((((Insn >> 24) & 0xfL))&(0x6L))==(0x6L)) {
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x8000000L))==(0x0L))) {
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
									DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									MI.setOpcode(DPU::SDSrir);
									return MCDisassembler::Success;
								}
								DAsm.Decode_endian(MI, (((Insn >> 27) & 1) << 0));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 39) & 7) << 4) | (((Insn >> 24) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
								DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::SDesir);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
		return MCDisassembler::Fail;
		}
	return MCDisassembler::Fail;
	}
	if (((((Insn >> 45) & 0x7L))==(0x0L))&&((((Insn >> 42) & 0x3L))!=(0x3L))) {
		if (((((Insn >> 32) & 0x3L))!=(0x3L))&&((((Insn >> 16) & 0x1L))==(0x0L))) {
			if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
				if ((((Insn >> 37) & 0x3L))==(0x3L)) {
					DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
					DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) | (((Insn >> 44) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					MI.setOpcode(DPU::ADD_Srri);
					return MCDisassembler::Success;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
				if ((((Insn >> 37) & 0x3L))==(0x3L)) {
					DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
					DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) | (((Insn >> 44) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					MI.setOpcode(DPU::ADD_Urri);
					return MCDisassembler::Success;
				}
			return MCDisassembler::Fail;
			}
		return MCDisassembler::Fail;
		}
		if ((((Insn >> 32) & 0x3L))==(0x3L)) {
			if (((((Insn >> 44) & 0xfL))==(0x0L))&&((((Insn >> 42) & 0x3L))!=(0x3L))) {
				if ((((Insn >> 42) & 0x3L))!=(0x3L)) {
					DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
					DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					MI.setOpcode(DPU::ADDrri);
					return MCDisassembler::Success;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 44) & 0xfL))==(0x1L))&&((((Insn >> 42) & 0x3L))!=(0x3L))) {
				if ((((Insn >> 42) & 0x3L))!=(0x3L)) {
					DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
					DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					MI.setOpcode(DPU::ADDCrri);
					return MCDisassembler::Success;
				}
			return MCDisassembler::Fail;
			}
		return MCDisassembler::Fail;
		}
	return MCDisassembler::Fail;
	}
	if ((((((Insn >> 47) & 0x1L))==(0x0L))&&((((Insn >> 44) & 0x7L))!=(0x7L)))&&((((Insn >> 42) & 0x3L))==(0x3L))) {
		if ((((Insn >> 32) & 0x3L))==(0x3L)) {
			if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x0L)) {
					if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 31) << 0));
							MI.setOpcode(DPU::ADD_Srric);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
							DAsm.Decode_cc(MI, ConditionClass::Add_nzCC, (((Insn >> 24) & 31) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ADD_Srrici);
							return MCDisassembler::Success;
						}
						if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_false_cc(MI);
							MI.setOpcode(DPU::ADD_Srrif);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x2L)) {
					if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 31) << 0));
							MI.setOpcode(DPU::ADDC_Srric);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
							DAsm.Decode_cc(MI, ConditionClass::Add_nzCC, (((Insn >> 24) & 31) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ADDC_Srrici);
							return MCDisassembler::Success;
						}
						if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_false_cc(MI);
							MI.setOpcode(DPU::ADDC_Srrif);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x4L)) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_cc(MI, ConditionClass::Sub_setCC, (((Insn >> 24) & 31) << 0));
						MI.setOpcode(DPU::SUB_Srirc);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::SUB_Srirci);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::SUB_Srirf);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xaL))==(0x8L)) {
					if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
						if ((((((Insn >> 30) & 0x1L))==(0x1L))||((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))))&&(((((Insn >> 30) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
							MI.setOpcode(DPU::SUB_Srric);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 30) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L)))))&&(((((Insn >> 30) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
							DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::SUB_Srrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 24) & 0x1fL))==(0x0L))&&((((Insn >> 30) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_false_cc(MI);
							MI.setOpcode(DPU::SUB_Srrif);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x6L)) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_cc(MI, ConditionClass::Sub_setCC, (((Insn >> 24) & 31) << 0));
						MI.setOpcode(DPU::SUBC_Srirc);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::SUBC_Srirci);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::SUBC_Srirf);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xaL))==(0xaL)) {
					if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
						if ((((((Insn >> 30) & 0x1L))==(0x1L))||((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))))&&(((((Insn >> 30) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
							MI.setOpcode(DPU::SUBC_Srric);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 30) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L)))))&&(((((Insn >> 30) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
							DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::SUBC_Srrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 24) & 0x1fL))==(0x0L))&&((((Insn >> 30) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_false_cc(MI);
							MI.setOpcode(DPU::SUBC_Srrif);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x0L)) {
					if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 31) << 0));
							MI.setOpcode(DPU::ADD_Urric);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
							DAsm.Decode_cc(MI, ConditionClass::Add_nzCC, (((Insn >> 24) & 31) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ADD_Urrici);
							return MCDisassembler::Success;
						}
						if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_false_cc(MI);
							MI.setOpcode(DPU::ADD_Urrif);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x2L)) {
					if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 31) << 0));
							MI.setOpcode(DPU::ADDC_Urric);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
							DAsm.Decode_cc(MI, ConditionClass::Add_nzCC, (((Insn >> 24) & 31) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ADDC_Urrici);
							return MCDisassembler::Success;
						}
						if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_false_cc(MI);
							MI.setOpcode(DPU::ADDC_Urrif);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x4L)) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_cc(MI, ConditionClass::Sub_setCC, (((Insn >> 24) & 31) << 0));
						MI.setOpcode(DPU::SUB_Urirc);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::SUB_Urirci);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::SUB_Urirf);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xaL))==(0x8L)) {
					if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
						if ((((((Insn >> 30) & 0x1L))==(0x1L))||((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))))&&(((((Insn >> 30) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
							MI.setOpcode(DPU::SUB_Urric);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 30) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L)))))&&(((((Insn >> 30) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
							DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::SUB_Urrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 24) & 0x1fL))==(0x0L))&&((((Insn >> 30) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_false_cc(MI);
							MI.setOpcode(DPU::SUB_Urrif);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x6L)) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_cc(MI, ConditionClass::Sub_setCC, (((Insn >> 24) & 31) << 0));
						MI.setOpcode(DPU::SUBC_Urirc);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::SUBC_Urirci);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::SUBC_Urirf);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xaL))==(0xaL)) {
					if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
						if ((((((Insn >> 30) & 0x1L))==(0x1L))||((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))))&&(((((Insn >> 30) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
							MI.setOpcode(DPU::SUBC_Urric);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 30) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L)))))&&(((((Insn >> 30) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
							DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::SUBC_Urrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 24) & 0x1fL))==(0x0L))&&((((Insn >> 30) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_false_cc(MI);
							MI.setOpcode(DPU::SUBC_Urrif);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x0L))) {
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x0L)) {
					if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 31) << 0));
							MI.setOpcode(DPU::ADDrric);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
							DAsm.Decode_cc(MI, ConditionClass::Add_nzCC, (((Insn >> 24) & 31) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ADDrrici);
							return MCDisassembler::Success;
						}
						if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_false_cc(MI);
							MI.setOpcode(DPU::ADDrrif);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0x1L))==(0x1L))&&((((Insn >> 24) & 0xfL))==(0x0L))) {
						if (useSugar && (true)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 31) << 12) | (((Insn >> 5) & 1) << 16) | (((Insn >> 6) & 1) << 16) | (((Insn >> 7) & 1) << 16) | (((Insn >> 8) & 1) << 16) | (((Insn >> 9) & 1) << 16) | (((Insn >> 10) & 1) << 16) | (((Insn >> 11) & 1) << 16), 24 );
							MI.setOpcode(DPU::ADDSrri);
							return MCDisassembler::Success;
						}
						DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 31) << 12) | (((Insn >> 5) & 1) << 16) | (((Insn >> 6) & 1) << 16) | (((Insn >> 7) & 1) << 16) | (((Insn >> 8) & 1) << 16) | (((Insn >> 9) & 1) << 16) | (((Insn >> 10) & 1) << 16) | (((Insn >> 11) & 1) << 16), 24 );
						MI.setOpcode(DPU::ADDssi);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x2L)) {
					if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 31) << 0));
							MI.setOpcode(DPU::ADDCrric);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
							DAsm.Decode_cc(MI, ConditionClass::Add_nzCC, (((Insn >> 24) & 31) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ADDCrrici);
							return MCDisassembler::Success;
						}
						if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_false_cc(MI);
							MI.setOpcode(DPU::ADDCrrif);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x4L)) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_cc(MI, ConditionClass::Sub_setCC, (((Insn >> 24) & 31) << 0));
						MI.setOpcode(DPU::SUBrirc);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0xff0000L))==(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::NEGrrci);
							return MCDisassembler::Success;
						}
						DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::SUBrirci);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::SUBrirf);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xaL))==(0x8L)) {
					if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
						if ((((((Insn >> 30) & 0x1L))==(0x1L))||((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))))&&(((((Insn >> 30) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
							MI.setOpcode(DPU::SUBrric);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 30) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L)))))&&(((((Insn >> 30) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
							DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::SUBrrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 24) & 0x1fL))==(0x0L))&&((((Insn >> 30) & 0x1L))==(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_false_cc(MI);
							MI.setOpcode(DPU::SUBrrif);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0x1L))==(0x1L))&&((((Insn >> 24) & 0xfL))==(0x0L))) {
						if (useSugar && (true)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 31) << 12) | (((Insn >> 5) & 1) << 16) | (((Insn >> 6) & 1) << 16) | (((Insn >> 7) & 1) << 16) | (((Insn >> 8) & 1) << 16) | (((Insn >> 9) & 1) << 16) | (((Insn >> 10) & 1) << 16) | (((Insn >> 11) & 1) << 16), 24 );
							MI.setOpcode(DPU::SUBSrri);
							return MCDisassembler::Success;
						}
						DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 31) << 12) | (((Insn >> 5) & 1) << 16) | (((Insn >> 6) & 1) << 16) | (((Insn >> 7) & 1) << 16) | (((Insn >> 8) & 1) << 16) | (((Insn >> 9) & 1) << 16) | (((Insn >> 10) & 1) << 16) | (((Insn >> 11) & 1) << 16), 24 );
						MI.setOpcode(DPU::SUBssi);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x6L)) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_cc(MI, ConditionClass::Sub_setCC, (((Insn >> 24) & 31) << 0));
						MI.setOpcode(DPU::SUBCrirc);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::SUBCrirci);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::SUBCrirf);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xaL))==(0xaL)) {
					if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
						if ((((((Insn >> 30) & 0x1L))==(0x1L))||((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))))&&(((((Insn >> 30) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
							MI.setOpcode(DPU::SUBCrric);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 30) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L)))))&&(((((Insn >> 30) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
							DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::SUBCrrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 24) & 0x1fL))==(0x0L))&&((((Insn >> 30) & 0x1L))==(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							DAsm.Decode_false_cc(MI);
							MI.setOpcode(DPU::SUBCrrif);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if ((((Insn >> 44) & 0x3L))==(0x3L)) {
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x0L)) {
					if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24), 27 );
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 31) << 0));
							MI.setOpcode(DPU::ADDzric);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8), 11 );
							DAsm.Decode_cc(MI, ConditionClass::Add_nzCC, (((Insn >> 24) & 31) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ADDzrici);
							return MCDisassembler::Success;
						}
						if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24), 27 );
							DAsm.Decode_false_cc(MI);
							MI.setOpcode(DPU::ADDzrif);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x2L)) {
					if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24), 27 );
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 31) << 0));
							MI.setOpcode(DPU::ADDCzric);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8), 11 );
							DAsm.Decode_cc(MI, ConditionClass::Add_nzCC, (((Insn >> 24) & 31) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ADDCzrici);
							return MCDisassembler::Success;
						}
						if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24), 27 );
							DAsm.Decode_false_cc(MI);
							MI.setOpcode(DPU::ADDCzrif);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x4L)) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24), 27 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_cc(MI, ConditionClass::Sub_setCC, (((Insn >> 24) & 31) << 0));
						MI.setOpcode(DPU::SUBzirc);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8), 11 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::SUBzirci);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24), 27 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::SUBzirf);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xaL))==(0x8L)) {
					if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
						if ((((((Insn >> 30) & 0x1L))==(0x1L))||((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))))&&(((((Insn >> 30) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24), 27 );
							DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
							MI.setOpcode(DPU::SUBzric);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 30) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L)))))&&(((((Insn >> 30) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x3805fff0000L))==(0x2000000L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::JZri);
								return MCDisassembler::Success;
							}
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x3805fff0000L))==(0x3000000L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::JNZri);
								return MCDisassembler::Success;
							}
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x2000000L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8), 11 );
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::JEQrii);
								return MCDisassembler::Success;
							}
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x3000000L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8), 11 );
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::JNEQrii);
								return MCDisassembler::Success;
							}
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x14000000L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8), 11 );
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::JLTUrii);
								return MCDisassembler::Success;
							}
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x1b000000L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8), 11 );
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::JGTUrii);
								return MCDisassembler::Success;
							}
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x1a000000L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8), 11 );
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::JLEUrii);
								return MCDisassembler::Success;
							}
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x15000000L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8), 11 );
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::JGEUrii);
								return MCDisassembler::Success;
							}
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x16000000L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8), 11 );
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::JLTSrii);
								return MCDisassembler::Success;
							}
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x19000000L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8), 11 );
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::JGTSrii);
								return MCDisassembler::Success;
							}
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x18000000L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8), 11 );
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::JLESrii);
								return MCDisassembler::Success;
							}
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x17000000L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8), 11 );
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::JGESrii);
								return MCDisassembler::Success;
							}
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8), 11 );
							DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::SUBzrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 24) & 0x1fL))==(0x0L))&&((((Insn >> 30) & 0x1L))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24), 27 );
							DAsm.Decode_false_cc(MI);
							MI.setOpcode(DPU::SUBzrif);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x6L)) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24), 27 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_cc(MI, ConditionClass::Sub_setCC, (((Insn >> 24) & 31) << 0));
						MI.setOpcode(DPU::SUBCzirc);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8), 11 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::SUBCzirci);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24), 27 );
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::SUBCzirf);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0xaL))==(0xaL)) {
					if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
						if ((((((Insn >> 30) & 0x1L))==(0x1L))||((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))))&&(((((Insn >> 30) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24), 27 );
							DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
							MI.setOpcode(DPU::SUBCzric);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 30) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L)))))&&(((((Insn >> 30) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8), 11 );
							DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::SUBCzrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 24) & 0x1fL))==(0x0L))&&((((Insn >> 30) & 0x1L))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24), 27 );
							DAsm.Decode_false_cc(MI);
							MI.setOpcode(DPU::SUBCzrif);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
		return MCDisassembler::Fail;
		}
		if (((((Insn >> 32) & 0x3L))!=(0x3L))&&((((Insn >> 16) & 0x1L))==(0x0L))) {
			if (((((Insn >> 20) & 0xfL))&(0xcL))==(0xcL)) {
				if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
					if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x0L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::ADD_Srrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 31) << 0));
								MI.setOpcode(DPU::ADD_Srrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Add_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::ADD_Srrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x2L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::ADDC_Srrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 31) << 0));
								MI.setOpcode(DPU::ADDC_Srrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Add_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::ADDC_Srrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x4L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::RSUB_Srrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_setCC, (((Insn >> 24) & 31) << 0));
								MI.setOpcode(DPU::RSUB_Srrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::RSUB_Srrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x6L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::RSUBC_Srrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_setCC, (((Insn >> 24) & 31) << 0));
								MI.setOpcode(DPU::RSUBC_Srrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::RSUBC_Srrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xaL))==(0x8L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if (((((Insn >> 24) & 0x1fL))==(0x0L))&&((((Insn >> 30) & 0x1L))==(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::SUB_Srrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 30) & 0x1L))==(0x1L))||((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))))&&(((((Insn >> 30) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
								MI.setOpcode(DPU::SUB_Srrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 30) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L)))))&&(((((Insn >> 30) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::SUB_Srrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xaL))==(0xaL)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if (((((Insn >> 24) & 0x1fL))==(0x0L))&&((((Insn >> 30) & 0x1L))==(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::SUBC_Srrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 30) & 0x1L))==(0x1L))||((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))))&&(((((Insn >> 30) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
								MI.setOpcode(DPU::SUBC_Srrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 30) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L)))))&&(((((Insn >> 30) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::SUBC_Srrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
					if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x0L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::ADD_Urrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 31) << 0));
								MI.setOpcode(DPU::ADD_Urrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Add_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::ADD_Urrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x2L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::ADDC_Urrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 31) << 0));
								MI.setOpcode(DPU::ADDC_Urrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Add_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::ADDC_Urrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x4L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::RSUB_Urrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_setCC, (((Insn >> 24) & 31) << 0));
								MI.setOpcode(DPU::RSUB_Urrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::RSUB_Urrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x6L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::RSUBC_Urrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_setCC, (((Insn >> 24) & 31) << 0));
								MI.setOpcode(DPU::RSUBC_Urrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::RSUBC_Urrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xaL))==(0x8L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if (((((Insn >> 24) & 0x1fL))==(0x0L))&&((((Insn >> 30) & 0x1L))==(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::SUB_Urrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 30) & 0x1L))==(0x1L))||((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))))&&(((((Insn >> 30) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
								MI.setOpcode(DPU::SUB_Urrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 30) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L)))))&&(((((Insn >> 30) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::SUB_Urrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xaL))==(0xaL)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if (((((Insn >> 24) & 0x1fL))==(0x0L))&&((((Insn >> 30) & 0x1L))==(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::SUBC_Urrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 30) & 0x1L))==(0x1L))||((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))))&&(((((Insn >> 30) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
								MI.setOpcode(DPU::SUBC_Urrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 30) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L)))))&&(((((Insn >> 30) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::SUBC_Urrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x0L))) {
					if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x0L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::ADDrrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 31) << 0));
								MI.setOpcode(DPU::ADDrrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Add_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::ADDrrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if (((((Insn >> 28) & 0x1L))==(0x1L))&&((((Insn >> 24) & 0xfL))==(0x0L))) {
							if ((((Insn >> 37) & 0x3L))!=(0x3L)) {
								if (useSugar && (true)) {
									DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
									DAsm.Decode_ra(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									DAsm.Decode_rb(MI, (((Insn >> 34) & 31) << 0));
									MI.setOpcode(DPU::ADDSrrr);
									return MCDisassembler::Success;
								}
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_rb(MI, (((Insn >> 34) & 31) << 0));
								MI.setOpcode(DPU::ADDsss);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x2L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::ADDCrrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 31) << 0));
								MI.setOpcode(DPU::ADDCrrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Add_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::ADDCrrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x4L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::RSUBrrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_setCC, (((Insn >> 24) & 31) << 0));
								MI.setOpcode(DPU::RSUBrrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::RSUBrrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if (((((Insn >> 28) & 0x1L))==(0x1L))&&((((Insn >> 24) & 0xfL))==(0x0L))) {
							if ((((Insn >> 37) & 0x3L))!=(0x3L)) {
								if (useSugar && (true)) {
									DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
									DAsm.Decode_ra(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									DAsm.Decode_rb(MI, (((Insn >> 34) & 31) << 0));
									MI.setOpcode(DPU::SUBSrrr);
									return MCDisassembler::Success;
								}
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_rb(MI, (((Insn >> 34) & 31) << 0));
								MI.setOpcode(DPU::SUBsss);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x6L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::RSUBCrrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_setCC, (((Insn >> 24) & 31) << 0));
								MI.setOpcode(DPU::RSUBCrrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::RSUBCrrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xaL))==(0x8L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if (((((Insn >> 24) & 0x1fL))==(0x0L))&&((((Insn >> 30) & 0x1L))==(0x0L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::SUBrrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 30) & 0x1L))==(0x1L))||((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))))&&(((((Insn >> 30) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
								MI.setOpcode(DPU::SUBrrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 30) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L)))))&&(((((Insn >> 30) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::SUBrrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xaL))==(0xaL)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if (((((Insn >> 24) & 0x1fL))==(0x0L))&&((((Insn >> 30) & 0x1L))==(0x0L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::SUBCrrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 30) & 0x1L))==(0x1L))||((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))))&&(((((Insn >> 30) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
								MI.setOpcode(DPU::SUBCrrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 30) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L)))))&&(((((Insn >> 30) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::SUBCrrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 44) & 0x3L))==(0x3L)) {
					if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x0L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::ADDzrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 31) << 0));
								MI.setOpcode(DPU::ADDzrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Add_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::ADDzrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x2L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::ADDCzrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 31) << 0));
								MI.setOpcode(DPU::ADDCzrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Add_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::ADDCzrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x4L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::RSUBzrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_setCC, (((Insn >> 24) & 31) << 0));
								MI.setOpcode(DPU::RSUBzrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::RSUBzrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x6L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if ((((Insn >> 24) & 0x1fL))==(0x0L)) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::RSUBCzrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_setCC, (((Insn >> 24) & 31) << 0));
								MI.setOpcode(DPU::RSUBCzrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::RSUBCzrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xaL))==(0x8L)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if (((((Insn >> 24) & 0x1fL))==(0x0L))&&((((Insn >> 30) & 0x1L))==(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::SUBzrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 30) & 0x1L))==(0x1L))||((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))))&&(((((Insn >> 30) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
								MI.setOpcode(DPU::SUBzrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 30) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L)))))&&(((((Insn >> 30) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x2000000L))) {
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
									MI.setOpcode(DPU::JEQrri);
									return MCDisassembler::Success;
								}
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x3000000L))) {
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
									MI.setOpcode(DPU::JNEQrri);
									return MCDisassembler::Success;
								}
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x14000000L))) {
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
									MI.setOpcode(DPU::JLTUrri);
									return MCDisassembler::Success;
								}
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x1b000000L))) {
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
									MI.setOpcode(DPU::JGTUrri);
									return MCDisassembler::Success;
								}
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x1a000000L))) {
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
									MI.setOpcode(DPU::JLEUrri);
									return MCDisassembler::Success;
								}
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x15000000L))) {
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
									MI.setOpcode(DPU::JGEUrri);
									return MCDisassembler::Success;
								}
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x16000000L))) {
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
									MI.setOpcode(DPU::JLTSrri);
									return MCDisassembler::Success;
								}
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x19000000L))) {
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
									MI.setOpcode(DPU::JGTSrri);
									return MCDisassembler::Success;
								}
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x18000000L))) {
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
									MI.setOpcode(DPU::JLESrri);
									return MCDisassembler::Success;
								}
								if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x5f000000L))==(0x17000000L))) {
									DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
									MI.setOpcode(DPU::JGESrri);
									return MCDisassembler::Success;
								}
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::SUBzrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 28) & 0xfL))&(0xaL))==(0xaL)) {
						if (((((Insn >> 28) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0xfL))!=(0x0L))) {
							if (((((Insn >> 24) & 0x1fL))==(0x0L))&&((((Insn >> 30) & 0x1L))==(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::SUBCzrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 30) & 0x1L))==(0x1L))||((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&(((((Insn >> 25) & 0x1L))==(0x1L))&&((((Insn >> 28) & 0x1L))==(0x0L)))))&&(((((Insn >> 30) & 0x1L))!=(0x1L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Ext_sub_setCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
								MI.setOpcode(DPU::SUBCzrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 30) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0x1fL))<(0x6L))||(((((Insn >> 24) & 0x1fL))>(0xbL))||(((((Insn >> 24) & 0x1fL))&(0x1eL))==(0x8L)))))&&(((((Insn >> 30) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0x1fL))!=(0x0L)))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Sub_nzCC, (((Insn >> 24) & 31) << 0) | (((Insn >> 30) & 1) << 5));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::SUBCzrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 20) & 0xfL))&(0xcL))!=(0xcL)) {
				if (((((Insn >> 28) & 0xfL))&(0x2L))==(0x0L)) {
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x7L)) {
						if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SH_SH_Srrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SH_SH_Srrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SH_SH_Srrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if (((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x0L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SH_SHrrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SH_SHrrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SH_SHrrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if ((((Insn >> 44) & 0x3L))==(0x3L)) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SH_SHzrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SH_SHzrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SH_SHzrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x6L)) {
						if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SH_SL_Srrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SH_SL_Srrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SH_SL_Srrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if (((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x0L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SH_SLrrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SH_SLrrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SH_SLrrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if ((((Insn >> 44) & 0x3L))==(0x3L)) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SH_SLzrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SH_SLzrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SH_SLzrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xbL)) {
						if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SH_UH_Srrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SH_UH_Srrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SH_UH_Srrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if (((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x0L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SH_UHrrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SH_UHrrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SH_UHrrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if ((((Insn >> 44) & 0x3L))==(0x3L)) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SH_UHzrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SH_UHzrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SH_UHzrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xaL)) {
						if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SH_UL_Srrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SH_UL_Srrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SH_UL_Srrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if (((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x0L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SH_ULrrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SH_ULrrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SH_ULrrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if ((((Insn >> 44) & 0x3L))==(0x3L)) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SH_ULzrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SH_ULzrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SH_ULzrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x5L)) {
						if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SL_SH_Srrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SL_SH_Srrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SL_SH_Srrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if (((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x0L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SL_SHrrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SL_SHrrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SL_SHrrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if ((((Insn >> 44) & 0x3L))==(0x3L)) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SL_SHzrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SL_SHzrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SL_SHzrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x4L)) {
						if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SL_SL_Srrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SL_SL_Srrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SL_SL_Srrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if (((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x0L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SL_SLrrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SL_SLrrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SL_SLrrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if ((((Insn >> 44) & 0x3L))==(0x3L)) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SL_SLzrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SL_SLzrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SL_SLzrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x9L)) {
						if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SL_UH_Srrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SL_UH_Srrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SL_UH_Srrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if (((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x0L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SL_UHrrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SL_UHrrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SL_UHrrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if ((((Insn >> 44) & 0x3L))==(0x3L)) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SL_UHzrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SL_UHzrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SL_UHzrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x8L)) {
						if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SL_UL_Srrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SL_UL_Srrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SL_UL_Srrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if (((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x0L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SL_ULrrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SL_ULrrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SL_ULrrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if ((((Insn >> 44) & 0x3L))==(0x3L)) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_SL_ULzrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_SL_ULzrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_SL_ULzrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x3L)) {
						if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_UH_UH_Urrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_UH_UH_Urrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_UH_UH_Urrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if (((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x0L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_UH_UHrrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_UH_UHrrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_UH_UHrrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if ((((Insn >> 44) & 0x3L))==(0x3L)) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_UH_UHzrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_UH_UHzrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_UH_UHzrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x2L)) {
						if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_UH_UL_Urrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_UH_UL_Urrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_UH_UL_Urrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if (((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x0L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_UH_ULrrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_UH_ULrrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_UH_ULrrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if ((((Insn >> 44) & 0x3L))==(0x3L)) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_UH_ULzrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_UH_ULzrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_UH_ULzrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x1L)) {
						if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_UL_UH_Urrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_UL_UH_Urrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_UL_UH_Urrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if (((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x0L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_UL_UHrrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_UL_UHrrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_UL_UHrrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if ((((Insn >> 44) & 0x3L))==(0x3L)) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_UL_UHzrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_UL_UHzrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_UL_UHzrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x0L)) {
						if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_UL_UL_Urrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_UL_UL_Urrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_UL_UL_Urrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if (((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x0L))) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_UL_ULrrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_UL_ULrrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_UL_ULrrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
						if ((((Insn >> 44) & 0x3L))==(0x3L)) {
							if ((((Insn >> 24) & 0xfL))==(0x0L)) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MUL_UL_ULzrr);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
								MI.setOpcode(DPU::MUL_UL_ULzrrc);
								return MCDisassembler::Success;
							}
							if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0x1fL))!=(0x0L))) {
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_cc(MI, ConditionClass::Mul_nzCC, (((Insn >> 24) & 31) << 0));
								DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
								MI.setOpcode(DPU::MUL_UL_ULzrrci);
								return MCDisassembler::Success;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 28) & 0xfL))&(0x3L))==(0x2L)) {
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x8L)) {
						if ((((Insn >> 34) & 0x1fL))==(0x18L)) {
							if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
								if ((((Insn >> 24) & 0xfL))==(0x0L)) {
									DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
									MI.setOpcode(DPU::TIME_Sr);
									return MCDisassembler::Success;
								}
								if ((((((Insn >> 24) & 0xfL))<(0x6L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
									DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
									DAsm.Decode_cc(MI, ConditionClass::TrueCC, (((Insn >> 24) & 15) << 0));
									DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
									MI.setOpcode(DPU::TIME_Srci);
									return MCDisassembler::Success;
								}
							return MCDisassembler::Fail;
							}
							if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
								if ((((Insn >> 24) & 0xfL))==(0x0L)) {
									DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
									MI.setOpcode(DPU::TIME_Ur);
									return MCDisassembler::Success;
								}
								if ((((((Insn >> 24) & 0xfL))<(0x6L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
									DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
									DAsm.Decode_cc(MI, ConditionClass::TrueCC, (((Insn >> 24) & 15) << 0));
									DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
									MI.setOpcode(DPU::TIME_Urci);
									return MCDisassembler::Success;
								}
							return MCDisassembler::Fail;
							}
							if (((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x0L))) {
								if ((((Insn >> 24) & 0xfL))==(0x0L)) {
									DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
									MI.setOpcode(DPU::TIMEr);
									return MCDisassembler::Success;
								}
								if ((((((Insn >> 24) & 0xfL))<(0x6L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
									DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
									DAsm.Decode_cc(MI, ConditionClass::TrueCC, (((Insn >> 24) & 15) << 0));
									DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
									MI.setOpcode(DPU::TIMErci);
									return MCDisassembler::Success;
								}
							return MCDisassembler::Fail;
							}
							if ((((Insn >> 44) & 0x3L))==(0x3L)) {
								if ((((Insn >> 24) & 0xfL))==(0x0L)) {
									MI.setOpcode(DPU::TIMEz);
									return MCDisassembler::Success;
								}
								if ((((((Insn >> 24) & 0xfL))<(0x6L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
									DAsm.Decode_cc(MI, ConditionClass::TrueCC, (((Insn >> 24) & 15) << 0));
									DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
									MI.setOpcode(DPU::TIMEzci);
									return MCDisassembler::Success;
								}
							return MCDisassembler::Fail;
							}
						return MCDisassembler::Fail;
						}
						if ((((Insn >> 34) & 0x1fL))==(0x19L)) {
							if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
								if ((((Insn >> 24) & 0xfL))==(0x0L)) {
									DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									MI.setOpcode(DPU::TIME_CFG_Srr);
									return MCDisassembler::Success;
								}
								if ((((((Insn >> 24) & 0xfL))<(0x6L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
									DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									DAsm.Decode_cc(MI, ConditionClass::TrueCC, (((Insn >> 24) & 15) << 0));
									DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
									MI.setOpcode(DPU::TIME_CFG_Srrci);
									return MCDisassembler::Success;
								}
							return MCDisassembler::Fail;
							}
							if ((((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
								if ((((Insn >> 24) & 0xfL))==(0x0L)) {
									DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									MI.setOpcode(DPU::TIME_CFG_Urr);
									return MCDisassembler::Success;
								}
								if ((((((Insn >> 24) & 0xfL))<(0x6L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
									DAsm.Decode_dc(MI, (((Insn >> 40) & 3) << 1) | (((Insn >> 44) & 3) << 3));
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									DAsm.Decode_cc(MI, ConditionClass::TrueCC, (((Insn >> 24) & 15) << 0));
									DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
									MI.setOpcode(DPU::TIME_CFG_Urrci);
									return MCDisassembler::Success;
								}
							return MCDisassembler::Fail;
							}
							if (((((Insn >> 44) & 0x3L))!=(0x3L))&&((((Insn >> 46) & 0x1L))==(0x0L))) {
								if ((((Insn >> 24) & 0xfL))==(0x0L)) {
									DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									MI.setOpcode(DPU::TIME_CFGrr);
									return MCDisassembler::Success;
								}
								if ((((((Insn >> 24) & 0xfL))<(0x6L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
									DAsm.Decode_rc(MI, (((Insn >> 39) & 7) << 0) | (((Insn >> 44) & 3) << 3));
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									DAsm.Decode_cc(MI, ConditionClass::TrueCC, (((Insn >> 24) & 15) << 0));
									DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
									MI.setOpcode(DPU::TIME_CFGrrci);
									return MCDisassembler::Success;
								}
							return MCDisassembler::Fail;
							}
							if ((((Insn >> 44) & 0x3L))==(0x3L)) {
								if ((((Insn >> 24) & 0xfL))==(0x0L)) {
									if (useSugar && (true)) {
										DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
										MI.setOpcode(DPU::TIME_CFGr);
										return MCDisassembler::Success;
									}
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									MI.setOpcode(DPU::TIME_CFGzr);
									return MCDisassembler::Success;
								}
								if ((((((Insn >> 24) & 0xfL))<(0x6L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
									DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
									DAsm.Decode_cc(MI, ConditionClass::TrueCC, (((Insn >> 24) & 15) << 0));
									DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
									MI.setOpcode(DPU::TIME_CFGzrci);
									return MCDisassembler::Success;
								}
							return MCDisassembler::Fail;
							}
						return MCDisassembler::Fail;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
		return MCDisassembler::Fail;
		}
	return MCDisassembler::Fail;
	}
	if (((((Insn >> 44) & 0xfL))==(0x6L))&&((((Insn >> 42) & 0x3L))!=(0x3L))) {
		if (((((Insn >> 32) & 0x3L))!=(0x3L))&&((((Insn >> 16) & 0x1L))==(0x0L))) {
			if ((((Insn >> 37) & 0x3L))==(0x3L)) {
				if (((((Insn >> 39) & 0x1fL))&(0x1eL))==(0x0L)) {
					DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) | (((Insn >> 39) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					MI.setOpcode(DPU::ADDzri);
					return MCDisassembler::Success;
				}
				if (((((Insn >> 39) & 0x1fL))&(0x1eL))==(0x2L)) {
					DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) | (((Insn >> 39) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					MI.setOpcode(DPU::ADDCzri);
					return MCDisassembler::Success;
				}
				if (((((Insn >> 39) & 0x1fL))&(0x1eL))==(0xaL)) {
					DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) | (((Insn >> 39) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					MI.setOpcode(DPU::ANDzri);
					return MCDisassembler::Success;
				}
				if (((((Insn >> 39) & 0x1fL))&(0x1eL))==(0xcL)) {
					DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) | (((Insn >> 39) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					MI.setOpcode(DPU::ORzri);
					return MCDisassembler::Success;
				}
				if (((((Insn >> 39) & 0x1fL))&(0x1eL))==(0x4L)) {
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) | (((Insn >> 39) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
					MI.setOpcode(DPU::SUBzir);
					return MCDisassembler::Success;
				}
				if (((((Insn >> 39) & 0x1fL))&(0x1eL))==(0x6L)) {
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) | (((Insn >> 39) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
					MI.setOpcode(DPU::SUBCzir);
					return MCDisassembler::Success;
				}
				if (((((Insn >> 39) & 0x1fL))&(0x1eL))==(0x8L)) {
					DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) | (((Insn >> 39) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					MI.setOpcode(DPU::XORzri);
					return MCDisassembler::Success;
				}
			return MCDisassembler::Fail;
			}
		return MCDisassembler::Fail;
		}
		if ((((Insn >> 32) & 0x3L))==(0x3L)) {
			if ((((Insn >> 42) & 0x3L))!=(0x3L)) {
				if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x7c00000000L))==(0x6000000000L))) {
					DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					MI.setOpcode(DPU::MOVEri);
					return MCDisassembler::Success;
				}
				DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
				DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
				DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
				MI.setOpcode(DPU::ORrri);
				return MCDisassembler::Success;
			}
		return MCDisassembler::Fail;
		}
	return MCDisassembler::Fail;
	}
	if (((((Insn >> 45) & 0x7L))==(0x2L))&&((((Insn >> 42) & 0x3L))!=(0x3L))) {
		if ((((Insn >> 32) & 0x3L))==(0x3L)) {
			if (((((Insn >> 44) & 0xfL))==(0x5L))&&((((Insn >> 42) & 0x3L))!=(0x3L))) {
				if ((((Insn >> 37) & 0x3L))==(0x3L)) {
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x7c00000000L))==(0x6800000000L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
							MI.setOpcode(DPU::MOVE_Sri);
							return MCDisassembler::Success;
						}
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
						MI.setOpcode(DPU::AND_Srki);
						return MCDisassembler::Success;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x7c00000000L))==(0x6800000000L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
							MI.setOpcode(DPU::MOVE_Uri);
							return MCDisassembler::Success;
						}
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
						MI.setOpcode(DPU::AND_Urki);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 37) & 0x3L))!=(0x3L)) {
					if ((((Insn >> 42) & 0x3L))!=(0x3L)) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
						MI.setOpcode(DPU::ANDrri);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 44) & 0xfL))==(0x4L))&&((((Insn >> 42) & 0x3L))!=(0x3L))) {
				if ((((Insn >> 42) & 0x3L))!=(0x3L)) {
					if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0xffffffffL))==(0xffffffffL))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						MI.setOpcode(DPU::NOTrr);
						return MCDisassembler::Success;
					}
					DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
					DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					MI.setOpcode(DPU::XORrri);
					return MCDisassembler::Success;
				}
			return MCDisassembler::Fail;
			}
		return MCDisassembler::Fail;
		}
		if (((((Insn >> 32) & 0x3L))!=(0x3L))&&((((Insn >> 16) & 0x1L))==(0x0L))) {
			if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
				if ((((Insn >> 37) & 0x3L))==(0x3L)) {
					DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
					DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) | (((Insn >> 44) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					MI.setOpcode(DPU::OR_Srri);
					return MCDisassembler::Success;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
				if ((((Insn >> 37) & 0x3L))==(0x3L)) {
					DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
					DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) | (((Insn >> 44) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					MI.setOpcode(DPU::OR_Urri);
					return MCDisassembler::Success;
				}
			return MCDisassembler::Fail;
			}
		return MCDisassembler::Fail;
		}
	return MCDisassembler::Fail;
	}
	if (((((Insn >> 45) & 0x7L))==(0x1L))&&((((Insn >> 42) & 0x3L))!=(0x3L))) {
		if (((((Insn >> 32) & 0x3L))!=(0x3L))&&((((Insn >> 16) & 0x1L))==(0x0L))) {
			if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
				if ((((Insn >> 37) & 0x3L))==(0x3L)) {
					DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
					DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) | (((Insn >> 44) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					MI.setOpcode(DPU::AND_Srri);
					return MCDisassembler::Success;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
				if ((((Insn >> 37) & 0x3L))==(0x3L)) {
					DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
					DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 34) & 7) << 4) | (((Insn >> 44) & 1) << 7) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					MI.setOpcode(DPU::AND_Urri);
					return MCDisassembler::Success;
				}
			return MCDisassembler::Fail;
			}
		return MCDisassembler::Fail;
		}
		if ((((Insn >> 32) & 0x3L))==(0x3L)) {
			if (((((Insn >> 44) & 0xfL))==(0x2L))&&((((Insn >> 42) & 0x3L))!=(0x3L))) {
				if ((((Insn >> 42) & 0x3L))!=(0x3L)) {
					if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0xffffffffL))==(0x0L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						MI.setOpcode(DPU::NEGrr);
						return MCDisassembler::Success;
					}
					DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
					MI.setOpcode(DPU::SUBrir);
					return MCDisassembler::Success;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 44) & 0xfL))==(0x3L))&&((((Insn >> 42) & 0x3L))!=(0x3L))) {
				if ((((Insn >> 42) & 0x3L))!=(0x3L)) {
					DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
					DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 24) & 255) << 24));
					DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
					MI.setOpcode(DPU::SUBCrir);
					return MCDisassembler::Success;
				}
			return MCDisassembler::Fail;
			}
		return MCDisassembler::Fail;
		}
	return MCDisassembler::Fail;
	}
	if ((((Insn >> 45) & 0x7L))==(0x4L)) {
		if ((((Insn >> 32) & 0x3L))==(0x3L)) {
			if (((((Insn >> 28) & 0xfL))&(0xfL))==(0xaL)) {
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::AND_Srric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::AND_Srrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::AND_Srrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::AND_Urric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::AND_Urrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::AND_Urrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::ANDrric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::ANDrrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::ANDrrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 42) & 0x3L))==(0x3L)) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27), 28 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::ANDzric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8) | (((Insn >> 44) & 1) << 11), 12 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::ANDzrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27), 28 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::ANDzrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xfL))==(0xcL)) {
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::ANDN_Srric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::ANDN_Srrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::ANDN_Srrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::ANDN_Urric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::ANDN_Urrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::ANDN_Urrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::ANDNrric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::ANDNrrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						if (useSugar && (true)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							MI.setOpcode(DPU::ANDNrri);
							return MCDisassembler::Success;
						}
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::ANDNrrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 42) & 0x3L))==(0x3L)) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27), 28 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::ANDNzric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8) | (((Insn >> 44) & 1) << 11), 12 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::ANDNzrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27), 28 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::ANDNzrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xcL))==(0x4L)) {
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
					if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x8L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::ASR_Srri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x4L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSL_Srri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x6L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSL1_Srri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x7L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSL1X_Srri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x5L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSLX_Srri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xcL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSR_Srri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xeL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSR1_Srri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xfL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSR1X_Srri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xdL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSRX_Srri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x2L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::ROL_Srri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xaL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::ROR_Srri);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x8L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ASR_Srric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x4L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL_Srric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x6L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL1_Srric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x7L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL1X_Srric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x5L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSLX_Srric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xcL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR_Srric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xeL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR1_Srric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xfL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR1X_Srric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xdL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSRX_Srric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x2L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ROL_Srric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xaL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ROR_Srric);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xdL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x8L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ASR_Srrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x4L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL_Srrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x6L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL1_Srrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x7L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL1X_Srrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x5L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSLX_Srrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xcL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR_Srrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xeL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR1_Srrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xfL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR1X_Srrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xdL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSRX_Srrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x2L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ROL_Srrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xaL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ROR_Srrici);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
					if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x8L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::ASR_Urri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x4L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSL_Urri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x6L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSL1_Urri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x7L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSL1X_Urri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x5L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSLX_Urri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xcL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSR_Urri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xeL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSR1_Urri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xfL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSR1X_Urri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xdL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSRX_Urri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x2L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::ROL_Urri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xaL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::ROR_Urri);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x8L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ASR_Urric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x4L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL_Urric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x6L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL1_Urric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x7L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL1X_Urric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x5L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSLX_Urric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xcL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR_Urric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xeL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR1_Urric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xfL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR1X_Urric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xdL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSRX_Urric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x2L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ROL_Urric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xaL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ROR_Urric);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xdL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x8L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ASR_Urrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x4L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL_Urrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x6L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL1_Urrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x7L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL1X_Urrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x5L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSLX_Urrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xcL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR_Urrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xeL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR1_Urrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xfL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR1X_Urrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xdL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSRX_Urrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x2L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ROL_Urrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xaL)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ROR_Urrici);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
					if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x8L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::ASRrri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x6L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSL1rri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x7L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSL1Xrri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x4L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSLrri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x5L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSLXrri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xeL)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSR1rri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xfL)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSR1Xrri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xcL)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSRrri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xdL)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSRXrri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x2L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::ROLrri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xaL)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::RORrri);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x8L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ASRrric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x6L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL1rric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x7L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL1Xrric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x4L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSLrric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x5L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSLXrric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xeL)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR1rric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xfL)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR1Xrric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xcL)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSRrric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xdL)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSRXrric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x2L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ROLrric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xaL)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::RORrric);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xdL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x8L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ASRrrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x6L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL1rrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x7L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL1Xrrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x4L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSLrrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x5L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSLXrrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xeL)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR1rrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xfL)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR1Xrrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xcL)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSRrrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xdL)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSRXrrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x2L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ROLrrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xaL)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::RORrrici);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 42) & 0x3L))==(0x3L)) {
					if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x8L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::ASRzri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x6L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSL1zri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x7L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSL1Xzri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x4L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSLzri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x5L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSLXzri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xeL)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSR1zri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xfL)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSR1Xzri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xcL)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSRzri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xdL)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::LSRXzri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x2L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::ROLzri);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xaL)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::RORzri);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x8L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ASRzric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x6L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL1zric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x7L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL1Xzric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x4L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSLzric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x5L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSLXzric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xeL)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR1zric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xfL)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR1Xzric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xcL)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSRzric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xdL)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSRXzric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x2L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ROLzric);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xaL)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::RORzric);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xdL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x8L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ASRzrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x6L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL1zrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x7L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL1Xzrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x4L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSLzrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x5L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSLXzrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xeL)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR1zrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xfL)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR1Xzrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xcL)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSRzrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xdL)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSRXzrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0x2L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ROLzrici);
							return MCDisassembler::Success;
						}
						if (((((Insn >> 16) & 0xfL))&(0xfL))==(0xaL)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::Imm_shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::RORzrici);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xfL))==(0x0L)) {
				if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0xffffffL))==(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::CALLrr);
							return MCDisassembler::Success;
						}
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x7c00000000L))==(0x6000000000L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12));
							MI.setOpcode(DPU::CALLri);
							return MCDisassembler::Success;
						}
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12));
						MI.setOpcode(DPU::CALLrri);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 42) & 0x3L))==(0x3L)) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x7c00000000L))==(0x6000000000L))) {
							DAsm.Decode_pc(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27));
							MI.setOpcode(DPU::JUMPi);
							return MCDisassembler::Success;
						}
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x138000ffffffL))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::JUMPr);
							return MCDisassembler::Success;
						}
						if (useSugar && (true)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27));
							MI.setOpcode(DPU::JUMPri);
							return MCDisassembler::Success;
						}
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_off(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27));
						MI.setOpcode(DPU::CALLzri);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xfL))==(0x3L)) {
				if (((((Insn >> 20) & 0xfL))&(0x7L))==(0x0L)) {
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::CAO_Srr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::CAO_Srrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Count_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::CAO_Srrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::CAO_Urr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::CAO_Urrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Count_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::CAO_Urrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::CAOrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::CAOrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Count_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::CAOrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::CAOzr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::CAOzrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Count_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::CAOzrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 20) & 0xfL))&(0x7L))==(0x1L)) {
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::CLO_Srr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::CLO_Srrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Count_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::CLO_Srrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::CLO_Urr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::CLO_Urrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Count_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::CLO_Urrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::CLOrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::CLOrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Count_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::CLOrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::CLOzr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::CLOzrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Count_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::CLOzrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 20) & 0xfL))&(0x7L))==(0x2L)) {
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::CLS_Srr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::CLS_Srrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Count_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::CLS_Srrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::CLS_Urr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::CLS_Urrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Count_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::CLS_Urrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::CLSrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::CLSrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Count_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::CLSrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::CLSzr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::CLSzrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Count_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::CLSzrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 20) & 0xfL))&(0x7L))==(0x3L)) {
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::CLZ_Srr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::CLZ_Srrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Count_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::CLZ_Srrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::CLZ_Urr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::CLZ_Urrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Count_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::CLZ_Urrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::CLZrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::CLZrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Count_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::CLZrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::CLZzr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::CLZzrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Count_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::CLZzrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 20) & 0xfL))&(0x7L))==(0x5L)) {
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::EXTSB_Srr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::EXTSB_Srrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::EXTSB_Srrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::EXTSBrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::EXTSBrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::EXTSBrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::EXTSBzr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::EXTSBzrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::EXTSBzrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 20) & 0xfL))&(0x7L))==(0x7L)) {
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::EXTSH_Srr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::EXTSH_Srrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::EXTSH_Srrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::EXTSHrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::EXTSHrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::EXTSHrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::EXTSHzr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::EXTSHzrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::EXTSHzrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 20) & 0xfL))&(0x7L))==(0x4L)) {
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::EXTUB_Urr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::EXTUB_Urrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::EXTUB_Urrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::EXTUBrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::EXTUBrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::EXTUBrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::EXTUBzr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::EXTUBzrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::EXTUBzrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 20) & 0xfL))&(0x7L))==(0x6L)) {
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::EXTUH_Urr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::EXTUH_Urrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::EXTUH_Urrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::EXTUHrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::EXTUHrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::EXTUHrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::EXTUHzr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::EXTUHzrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::EXTUHzrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xfL))==(0x1L)) {
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::HASH_Srric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::HASH_Srrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::HASH_Srrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::HASH_Urric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::HASH_Urrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::HASH_Urrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::HASHrric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::HASHrrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						if (useSugar && (true)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							MI.setOpcode(DPU::HASHrri);
							return MCDisassembler::Success;
						}
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::HASHrrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 42) & 0x3L))==(0x3L)) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27), 28 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::HASHzric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8) | (((Insn >> 44) & 1) << 11), 12 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::HASHzrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27), 28 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::HASHzrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xfL))==(0xfL)) {
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::NAND_Srric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::NAND_Srrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::NAND_Srrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::NAND_Urric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::NAND_Urrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::NAND_Urrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::NANDrric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::NANDrrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						if (useSugar && (true)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							MI.setOpcode(DPU::NANDrri);
							return MCDisassembler::Success;
						}
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::NANDrrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 42) & 0x3L))==(0x3L)) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27), 28 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::NANDzric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8) | (((Insn >> 44) & 1) << 11), 12 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::NANDzrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27), 28 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::NANDzrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xfL))==(0xeL)) {
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::NOR_Srric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::NOR_Srrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::NOR_Srrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::NOR_Urric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::NOR_Urrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::NOR_Urrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::NORrric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::NORrrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						if (useSugar && (true)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							MI.setOpcode(DPU::NORrri);
							return MCDisassembler::Success;
						}
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::NORrrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 42) & 0x3L))==(0x3L)) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27), 28 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::NORzric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8) | (((Insn >> 44) & 1) << 11), 12 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::NORzrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27), 28 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::NORzrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xfL))==(0x9L)) {
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::NXOR_Srric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::NXOR_Srrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::NXOR_Srrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::NXOR_Urric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::NXOR_Urrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::NXOR_Urrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::NXORrric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::NXORrrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						if (useSugar && (true)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							MI.setOpcode(DPU::NXORrri);
							return MCDisassembler::Success;
						}
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::NXORrrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 42) & 0x3L))==(0x3L)) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27), 28 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::NXORzric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8) | (((Insn >> 44) & 1) << 11), 12 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::NXORzrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27), 28 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::NXORzrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xfL))==(0xbL)) {
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::OR_Srric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::OR_Srrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0xffffffL))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::MOVE_Srr);
							return MCDisassembler::Success;
						}
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::OR_Srrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::OR_Urric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::OR_Urrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0xffffffL))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::MOVE_Urr);
							return MCDisassembler::Success;
						}
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::OR_Urrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::ORrric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0xff0000L))==(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::MOVErrci);
							return MCDisassembler::Success;
						}
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0x7c00000000L))==(0x6000000000L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::MOVErici);
							return MCDisassembler::Success;
						}
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::ORrrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0xffffffL))==(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::MOVErr);
							return MCDisassembler::Success;
						}
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::ORrrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 42) & 0x3L))==(0x3L)) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27), 28 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::ORzric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8) | (((Insn >> 44) & 1) << 11), 12 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::ORzrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27), 28 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::ORzrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xfL))==(0xdL)) {
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::ORN_Srric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::ORN_Srrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::ORN_Srrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::ORN_Urric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::ORN_Urrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::ORN_Urrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::ORNrric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::ORNrrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						if (useSugar && (true)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
							MI.setOpcode(DPU::ORNrri);
							return MCDisassembler::Success;
						}
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::ORNrrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 42) & 0x3L))==(0x3L)) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27), 28 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::ORNzric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8) | (((Insn >> 44) & 1) << 11), 12 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::ORNzrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27), 28 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::ORNzrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xfL))==(0x2L)) {
				if (((((Insn >> 20) & 0xfL))&(0xcL))==(0x0L)) {
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::SATS_Srr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::SATS_Srrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::SATS_Srrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::SATS_Urr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::SATS_Urrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::SATS_Urrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::SATSrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::SATSrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::SATSrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							MI.setOpcode(DPU::SATSzr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::SATSzrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::SATSzrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xfL))==(0x8L)) {
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::XOR_Srric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::XOR_Srrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::XOR_Srrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::XOR_Urric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::XOR_Urrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::XOR_Urrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::XORrric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4), 8 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::XORrrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12), 24 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::XORrrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 42) & 0x3L))==(0x3L)) {
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27), 28 );
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::XORzric);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 39) & 7) << 8) | (((Insn >> 44) & 1) << 11), 12 );
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::XORzrici);
						return MCDisassembler::Success;
					}
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_imm(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 16) & 15) << 4) | (((Insn >> 15) & 1) << 8) | (((Insn >> 14) & 1) << 9) | (((Insn >> 13) & 1) << 10) | (((Insn >> 12) & 1) << 11) | (((Insn >> 0) & 4095) << 12) | (((Insn >> 39) & 7) << 24) | (((Insn >> 44) & 1) << 27), 28 );
						DAsm.Decode_false_cc(MI);
						MI.setOpcode(DPU::XORzrif);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
		return MCDisassembler::Fail;
		}
		if (((((Insn >> 32) & 0x3L))!=(0x3L))&&((((Insn >> 16) & 0x1L))==(0x0L))) {
			if (((((Insn >> 28) & 0xfL))&(0xfL))==(0xcL)) {
				if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xaL)) {
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::AND_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::AND_Srrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::AND_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::AND_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::AND_Urrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::AND_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ANDrrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ANDrrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ANDrrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ANDzrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ANDzrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ANDzrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xcL)) {
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ANDN_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ANDN_Srrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ANDN_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ANDN_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ANDN_Urrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ANDN_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ANDNrrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ANDNrrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ANDNrrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ANDNzrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ANDNzrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ANDNzrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x0L)) {
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::CALLrrr);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::CALLzrr);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x1L)) {
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::HASH_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::HASH_Srrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::HASH_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::HASH_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::HASH_Urrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::HASH_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::HASHrrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::HASHrrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::HASHrrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::HASHzrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::HASHzrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::HASHzrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xfL)) {
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::NAND_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::NAND_Srrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::NAND_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::NAND_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::NAND_Urrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::NAND_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::NANDrrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::NANDrrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::NANDrrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::NANDzrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::NANDzrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::NANDzrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xeL)) {
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::NOR_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::NOR_Srrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::NOR_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::NOR_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::NOR_Urrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::NOR_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::NORrrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::NORrrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::NORrrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::NORzrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::NORzrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::NORzrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x9L)) {
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::NXOR_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::NXOR_Srrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::NXOR_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::NXOR_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::NXOR_Urrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::NXOR_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::NXORrrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::NXORrrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::NXORrrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::NXORzrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::NXORzrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::NXORzrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xbL)) {
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::OR_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::OR_Srrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::OR_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::OR_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::OR_Urrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::OR_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ORrrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ORrrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ORrrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ORzrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ORzrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ORzrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xdL)) {
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ORN_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ORN_Srrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ORN_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ORN_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ORN_Urrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ORN_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ORNrrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ORNrrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ORNrrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ORNzrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ORNzrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ORNzrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x8L)) {
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::XOR_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::XOR_Srrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::XOR_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::XOR_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::XOR_Urrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::XOR_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::XORrrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::XORrrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::XORrrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if ((((Insn >> 42) & 0x3L))==(0x3L)) {
						if ((((Insn >> 24) & 0xfL))==(0x0L)) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::XORzrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::XORzrrc);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::XORzrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xdL))==(0xdL)) {
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x8L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ASR_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ASR_Srrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ASR_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x4L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSL_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL_Srrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x6L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSL1_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL1_Srrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL1_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x7L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSL1X_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL1X_Srrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL1X_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x5L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSLX_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSLX_Srrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSLX_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xcL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSR_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR_Srrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xeL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSR1_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR1_Srrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR1_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xfL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSR1X_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR1X_Srrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR1X_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xdL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSRX_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSRX_Srrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSRX_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x2L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ROL_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ROL_Srrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ROL_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xaL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ROR_Srrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ROR_Srrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ROR_Srrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x8L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ASR_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ASR_Urrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ASR_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x4L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSL_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL_Urrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x6L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSL1_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL1_Urrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL1_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x7L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSL1X_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL1X_Urrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL1X_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x5L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSLX_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSLX_Urrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSLX_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xcL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSR_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR_Urrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xeL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSR1_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR1_Urrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR1_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xfL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSR1X_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR1X_Urrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR1X_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xdL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSRX_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSRX_Urrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSRX_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x2L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ROL_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ROL_Urrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ROL_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xaL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ROR_Urrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ROR_Urrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ROR_Urrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x8L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ASRrrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ASRrrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ASRrrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x6L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSL1rrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL1rrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL1rrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x7L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSL1Xrrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL1Xrrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL1Xrrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x4L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSLrrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSLrrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSLrrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x5L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSLXrrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSLXrrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSLXrrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xeL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSR1rrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR1rrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR1rrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xfL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSR1Xrrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR1Xrrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR1Xrrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xcL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSRrrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSRrrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSRrrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xdL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSRXrrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSRXrrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSRXrrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x2L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ROLrrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ROLrrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ROLrrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xaL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::RORrrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::RORrrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::RORrrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 42) & 0x3L))==(0x3L)) {
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x8L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ASRzrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ASRzrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ASRzrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x6L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSL1zrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL1zrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL1zrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x7L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSL1Xzrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSL1Xzrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSL1Xzrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x4L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSLzrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSLzrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSLzrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x5L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSLXzrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSLXzrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSLXzrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xeL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSR1zrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR1zrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR1zrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xfL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSR1Xzrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSR1Xzrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSR1Xzrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xcL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSRzrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSRzrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSRzrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xdL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::LSRXzrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::LSRXzrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::LSRXzrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0x2L)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::ROLzrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::ROLzrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::ROLzrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
					if (((((Insn >> 20) & 0xfL))&(0xfL))==(0xaL)) {
						if (((((Insn >> 24) & 0xfL))==(0x0L))&&((((Insn >> 29) & 0x1L))==(0x0L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							MI.setOpcode(DPU::RORzrr);
							return MCDisassembler::Success;
						}
						if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
							MI.setOpcode(DPU::RORzrrc);
							return MCDisassembler::Success;
						}
						if (((((((Insn >> 29) & 0x1L))==(0x0L))&&(((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))||(((((Insn >> 29) & 0x1L))==(0x1L))&&(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L)))))&&(((((Insn >> 29) & 0x1L))!=(0x0L))||((((Insn >> 24) & 0xfL))!=(0x0L)))) {
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::Shift_nzCC, (((Insn >> 24) & 15) << 0) | (((Insn >> 29) & 1) << 4));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::RORzrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xcL))==(0x8L)) {
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						MI.setOpcode(DPU::CMPB4_Srrr);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::CMPB4_Srrrc);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::CMPB4_Srrrci);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						MI.setOpcode(DPU::CMPB4_Urrr);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::CMPB4_Urrrc);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::CMPB4_Urrrci);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						MI.setOpcode(DPU::CMPB4rrr);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::CMPB4rrrc);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::CMPB4rrrci);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 42) & 0x3L))==(0x3L)) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						MI.setOpcode(DPU::CMPB4zrr);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 26) & 0x1L))^(((Insn >> 27) & 0x1L)))==(0x1L))&&((((Insn >> 25) & 0x1L))==(0x1L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_cc(MI, ConditionClass::Log_setCC, (((Insn >> 24) & 15) << 0));
						MI.setOpcode(DPU::CMPB4zrrc);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x6L))||(((((Insn >> 24) & 0xfL))>(0xbL))||(((((Insn >> 24) & 0xfL))&(0xeL))==(0x8L))))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_cc(MI, ConditionClass::Log_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::CMPB4zrrci);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x4L)) {
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						MI.setOpcode(DPU::LSL_ADD_Srrri);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x2L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						DAsm.Decode_cc(MI, ConditionClass::Div_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::LSL_ADD_Srrrici);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						MI.setOpcode(DPU::LSL_ADD_Urrri);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x2L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						DAsm.Decode_cc(MI, ConditionClass::Div_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::LSL_ADD_Urrrici);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						MI.setOpcode(DPU::LSL_ADDrrri);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x2L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						DAsm.Decode_cc(MI, ConditionClass::Div_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::LSL_ADDrrrici);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 42) & 0x3L))==(0x3L)) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						MI.setOpcode(DPU::LSL_ADDzrri);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x2L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						DAsm.Decode_cc(MI, ConditionClass::Div_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::LSL_ADDzrrici);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x6L)) {
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						MI.setOpcode(DPU::LSL_SUB_Srrri);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x2L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						DAsm.Decode_cc(MI, ConditionClass::Div_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::LSL_SUB_Srrrici);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						MI.setOpcode(DPU::LSL_SUB_Urrri);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x2L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						DAsm.Decode_cc(MI, ConditionClass::Div_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::LSL_SUB_Urrrici);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						MI.setOpcode(DPU::LSL_SUBrrri);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x2L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						DAsm.Decode_cc(MI, ConditionClass::Div_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::LSL_SUBrrrici);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 42) & 0x3L))==(0x3L)) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						MI.setOpcode(DPU::LSL_SUBzrri);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x2L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						DAsm.Decode_cc(MI, ConditionClass::Div_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::LSL_SUBzrrici);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x2L)) {
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						MI.setOpcode(DPU::LSR_ADD_Srrri);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x2L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						DAsm.Decode_cc(MI, ConditionClass::Div_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::LSR_ADD_Srrrici);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						MI.setOpcode(DPU::LSR_ADD_Urrri);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x2L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						DAsm.Decode_cc(MI, ConditionClass::Div_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::LSR_ADD_Urrrici);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						MI.setOpcode(DPU::LSR_ADDrrri);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x2L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						DAsm.Decode_cc(MI, ConditionClass::Div_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::LSR_ADDrrrici);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 42) & 0x3L))==(0x3L)) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						MI.setOpcode(DPU::LSR_ADDzrri);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x2L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						DAsm.Decode_cc(MI, ConditionClass::Div_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::LSR_ADDzrrici);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x0L)) {
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x1L))) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						MI.setOpcode(DPU::ROL_ADD_Srrri);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x2L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						DAsm.Decode_cc(MI, ConditionClass::Div_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::ROL_ADD_Srrrici);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x1L)))&&((((Insn >> 39) & 0x1L))==(0x0L))) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						MI.setOpcode(DPU::ROL_ADD_Urrri);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x2L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_dc(MI, (((Insn >> 40) & 15) << 1));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						DAsm.Decode_cc(MI, ConditionClass::Div_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::ROL_ADD_Urrrici);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if (((((Insn >> 42) & 0x3L))!=(0x3L))&&((((Insn >> 44) & 0x1L))==(0x0L))) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						MI.setOpcode(DPU::ROL_ADDrrri);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x2L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_rc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						DAsm.Decode_cc(MI, ConditionClass::Div_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::ROL_ADDrrrici);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
				if ((((Insn >> 42) & 0x3L))==(0x3L)) {
					if ((((Insn >> 24) & 0xfL))==(0x0L)) {
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						MI.setOpcode(DPU::ROL_ADDzrri);
						return MCDisassembler::Success;
					}
					if ((((((Insn >> 24) & 0xfL))<(0x2L))||((((Insn >> 24) & 0xfL))>(0xbL)))&&((((Insn >> 24) & 0xfL))!=(0x0L))) {
						DAsm.Decode_rb(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						DAsm.Decode_cc(MI, ConditionClass::Div_nzCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::ROL_ADDzrrici);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
		return MCDisassembler::Fail;
		}
		if (((((Insn >> 32) & 0x3L))!=(0x3L))&&((((Insn >> 16) & 0x1L))==(0x1L))) {
			if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x6L)) {
				if ((((Insn >> 42) & 0x3L))!=(0x3L)) {
					if (((((Insn >> 24) & 0xfL))<(0x2L))||((((Insn >> 24) & 0xfL))>(0xbL))) {
						if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0xf00ffffL))==(0x0L))) {
							DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							MI.setOpcode(DPU::DIV_STEPrrri);
							return MCDisassembler::Success;
						}
						DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
						DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
						DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
						DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
						DAsm.Decode_cc(MI, ConditionClass::DivCC, (((Insn >> 24) & 15) << 0));
						DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
						MI.setOpcode(DPU::DIV_STEPrrrici);
						return MCDisassembler::Success;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xfL))==(0x2L)) {
				if ((((Insn >> 42) & 0x3L))!=(0x3L)) {
					if ((((Insn >> 34) & 0x1fL))==(0x18L)) {
						if (((((Insn >> 24) & 0xfL))<(0x6L))||((((Insn >> 24) & 0xfL))>(0xbL))) {
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0xf00ffffL))==(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
								DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::MOVDrr);
								return MCDisassembler::Success;
							}
							DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::True_falseCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::MOVDrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xeL))==(0x4L)) {
				if ((((Insn >> 42) & 0x3L))!=(0x3L)) {
					if ((((Insn >> 34) & 0x1fL))!=(0x18L)) {
						if (((((Insn >> 24) & 0xfL))<(0x6L))||((((Insn >> 24) & 0xfL))>(0xbL))) {
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0xf00ffffL))==(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
								DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
								DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
								MI.setOpcode(DPU::MUL_STEPrrri);
								return MCDisassembler::Success;
							}
							DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_ra(MI, (((Insn >> 34) & 31) << 0));
							DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_shift(MI, (((Insn >> 20) & 15) << 0) | (((Insn >> 28) & 1) << 4));
							DAsm.Decode_cc(MI, ConditionClass::BootCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::MUL_STEPrrrici);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
			if (((((Insn >> 28) & 0xfL))&(0xfL))==(0xaL)) {
				if ((((Insn >> 42) & 0x3L))!=(0x3L)) {
					if ((((Insn >> 34) & 0x1fL))==(0x18L)) {
						if (((((Insn >> 24) & 0xfL))<(0x6L))||((((Insn >> 24) & 0xfL))>(0xbL))) {
							if (useSugar && (((((Insn >> 0) & 0xffffffffffffL))&(0xf00ffffL))==(0x0L))) {
								DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
								DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
								MI.setOpcode(DPU::SWAPDrr);
								return MCDisassembler::Success;
							}
							DAsm.Decode_dc(MI, (((Insn >> 39) & 31) << 0));
							DAsm.Decode_db(MI, (((Insn >> 17) & 7) << 0) | (((Insn >> 32) & 3) << 3));
							DAsm.Decode_cc(MI, ConditionClass::True_falseCC, (((Insn >> 24) & 15) << 0));
							DAsm.Decode_pc(MI, (((Insn >> 0) & 65535) << 0));
							MI.setOpcode(DPU::SWAPDrrci);
							return MCDisassembler::Success;
						}
					return MCDisassembler::Fail;
					}
				return MCDisassembler::Fail;
				}
			return MCDisassembler::Fail;
			}
		return MCDisassembler::Fail;
		}
	return MCDisassembler::Fail;
	}
return MCDisassembler::Fail;

	return MCDisassembler::Fail;
}
