//===-- DPUInstPrinter.h - Convert DPU MCInst to asm syntax -------*- C++ -*--//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This class prints a DPU MCInst to a .s file.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_DPU_INSTPRINTER_DPUINSTPRINTER_H
#define LLVM_LIB_TARGET_DPU_INSTPRINTER_DPUINSTPRINTER_H

#include "llvm/MC/MCInstPrinter.h"
#include <llvm/MC/MCAsmInfo.h>
#include <llvm/Support/raw_ostream.h>

namespace llvm {
class MCOperand;

class DPUInstPrinter : public MCInstPrinter {
protected:
  const MCAsmInfo &MAI;

public:
  DPUInstPrinter(const MCAsmInfo &mai, const MCInstrInfo &MII,
                 const MCRegisterInfo &MRI)
      : MCInstPrinter(mai, MII, MRI), MAI(mai) {}
  ~DPUInstPrinter() {}

  void printInst(const MCInst *MI, raw_ostream &OS, StringRef Annot,
                 const MCSubtargetInfo &STI) override;
  void printOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O,
                    const char *Modifier = nullptr);
  template <unsigned Bits>
  void printSImm(const MCInst *MI, unsigned OpNo, raw_ostream &O,
                 const char *Modifier = nullptr);
  template <unsigned Bits>
  void printUImm(const MCInst *MI, unsigned OpNo, raw_ostream &O,
                 const char *Modifier = nullptr);
  template <unsigned Bits>
  void printSUImm(const MCInst *MI, unsigned OpNo, raw_ostream &O,
                  const char *Modifier = nullptr);
  template <unsigned Bits>
  void printPCImm(const MCInst *MI, unsigned OpNo, raw_ostream &O,
                  const char *Modifier = nullptr);
  void printEndianness(const MCInst *MI, unsigned OpNo, raw_ostream &O,
                       const char *Modifier = nullptr);
  void printCondition(const MCInst *MI, unsigned OpNo, raw_ostream &O,
                      const char *Modifier = nullptr);
  void printImm5(const MCInst *MI, unsigned OpNo, raw_ostream &O,
                 const char *Modifier = nullptr);
  void printImm8(const MCInst *MI, unsigned OpNo, raw_ostream &O,
                 const char *Modifier = nullptr);
  void printImm11(const MCInst *MI, unsigned OpNo, raw_ostream &O,
                  const char *Modifier = nullptr);
  void printImm24(const MCInst *MI, unsigned OpNo, raw_ostream &O,
                  const char *Modifier = nullptr);
  void printMemOperandWithImm24(const MCInst *MI, unsigned int OpNo,
                                raw_ostream &O, const char *Modifier = nullptr);
  void printPCOffsetOperand(const MCInst *MI, unsigned int OpNo, raw_ostream &O,
                            const char *Modifier = nullptr);
  // To translate ISD::CondCode operands (see DPUInstrInfo.td)
  void printCCOperand(const MCInst *MI, unsigned int OpNo, raw_ostream &O,
                      const char *Modifier = nullptr);
  // To translate ArithmeticCondCode operands. This input is a regular
  // ISD::CondCode, but the translatation is one of "z", "nz", "pl" or "mi".
  void printACCOperand(const MCInst *MI, unsigned int OpNo, raw_ostream &O,
                       const char *Modifier = nullptr);

  // Autogenerated by tblgen.
  void printInstruction(const MCInst *MI, raw_ostream &O);
  static const char *getRegisterName(unsigned RegNo);
};
} // namespace llvm

#endif
